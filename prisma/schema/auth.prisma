model User {
    id                 String    @id @default(uuid())
    name               String
    phoneNumber        String    @unique @map("phone_number") @db.VarChar(16)
    email              String?   @unique
    password           String
    registrationNumber String?   @unique @map("registration_number") @db.VarChar(16)
    role               UserRole
    createdAt          DateTime  @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt          DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
    isDeleted          Boolean   @default(false) @map("is_deleted")
    deletedAt          DateTime? @map("deleted_at") @db.Timestamptz()

    patient   Patient?
    caregiver Caregiver?
    tokens    UserToken[]
    UserLocation UserLocation[]

    @@index([email, registrationNumber, isDeleted])
}

model Patient {
    id   String @id
    user User   @relation(fields: [id], references: [id])

    birthdate     DateTime       @db.Date
    gender        Gender
    dementiaStage DementiaStage? @map("dementia_stage")

    safeLocationId String  @map("safe_location_id")
    safeLocation   Address @relation(fields: [safeLocationId], references: [id])

    caregivers               PatientCaregiver[]
    activities               Activity[]
    emergencyLogs            EmergencyLog[]
    weeklySummaries          WeeklySummary[]
    quizProgresses           UserQuizProgress[]
    buddyConversations       BuddyConversation[]

    @@index([safeLocationId])
}

model Caregiver {
    id   String @id
    user User   @relation(fields: [id], references: [id])

    addressId String  @map("address_id")
    address   Address @relation(fields: [addressId], references: [id])

    patients PatientCaregiver[]

    @@index([addressId])
}

model PatientCaregiver {
    id String @id @default(uuid())

    patientId String  @map("patient_id")
    patient   Patient @relation(fields: [patientId], references: [id])

    caregiverId String    @map("caregiver_id")
    caregiver   Caregiver @relation(fields: [caregiverId], references: [id])

    createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
    isDeleted Boolean   @default(false) @map("is_deleted")
    deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

    @@unique([patientId, caregiverId])
    @@index([patientId, caregiverId, isDeleted])
}

model UserToken {
    id String @id @default(uuid())

    userId String @map("user_id")
    user   User   @relation(fields: [userId], references: [id])

    token            String      @unique
    status           TokenStatus @default(ACTIVE)
    deactivatedAfter DateTime    @map("deactivated_after") @db.Timestamptz()
    blacklistedAt    DateTime?   @map("blacklisted_at") @db.Timestamptz()
    createdAt        DateTime    @default(now()) @map("created_at") @db.Timestamptz()
    updatedAt        DateTime    @updatedAt @map("updated_at") @db.Timestamptz()

    @@index([userId, status])
}

enum UserRole {
    PATIENT
    CAREGIVER
}

enum Gender {
    MAN
    WOMAN
}

enum DementiaStage {
    EARLY
    MIDDLE
    LATE
}

enum TokenStatus {
    ACTIVE
    NONACTIVE
    BLACKLISTED
}
